// Configuration constants
const DATA_PATH = './';
const SUPABASE_URL = 'https://eithnnxevoqckkzhvnci.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVpdGhubnhldm9xY2tremh2bmNpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxODQ4MjYsImV4cCI6MjA3NTc2MDgyNn0.wEuqy7mtia_5KsCWwD83LXMgOyZ8nGHng7nMVxGp-Ig';
const FORMSPREE_ENDPOINT = 'https://formspree.io/f/xldppdop';
const GENERIC_WAITLIST_WEBHOOK = 'https://hook.us2.make.com/epjxwhxy1kyfikc75m6f8gw98iotjk20';

// Application state (in-memory storage)
let appState = {
    currentScreen: 'landing-page',
    surveyVersion: 'regular',
    currentQuestionIndex: 0,
    answers: {},
    userInfo: {},
    elementScores: {},
    finalResult: null,
    isLoading: true,
    error: null
};

// Data containers
let appData = {
    landingPage: null,
    questions: null,
    decisionMapping: null,
    resultsTemplate: null
};

// Sample JSON data structures (would be loaded from files)
const sampleData = {
    landingPage: {
        hero: {
            title: "Tu ciclo es √∫nico. Tu medicina tambi√©n deber√≠a serlo.",
            subtitle: "Conoce los elementos que se mueven en tu cuerpo y c√≥mo equilibrarlos con medicina herbolaria ancestral.",
            primary_cta: "Descubre tu tipo de ciclo"
        },
        value_prop: {
            title: "Medicina herbolaria personalizada, inspirada en los elementos",
            bullets: [
                "üå¨Ô∏è Diagn√≥stico energ√©tico: identifica tu patr√≥n (calor, fr√≠o, humedad, sequedad o tensi√≥n)",
                "üí° Explicaci√≥n clara: por qu√© tus s√≠ntomas se agrupan y qu√© los equilibra",
                "üìÖ Gu√≠as por fase del ciclo: h√°bitos, descanso y alimentos que nutren tu tipo"
            ]
        },
        waitlist: {
            title: "üåü ¬°S√© la Primera en Recibir Tu Medicina Personalizada!",
            benefits: [
                "üí∞ 20% de descuento como miembro fundador",
                "üîî Notificaciones exclusivas de lanzamiento",
                "üéØ Acceso prioritario a tu f√≥rmula personalizada",
                "üìö Gu√≠as gratuitas de salud menstrual"
            ],
            launch_date: "Lanzamiento previsto: Primavera 2026"
        }
    },
    
    questions: {
        regular: [
            {
                id: "contraception",
                type: "single",
                title: "¬øUsas anticoncepci√≥n hormonal actualmente?",
                subtitle: "Esto nos ayuda a entender mejor tu patr√≥n natural.",
                options: [
                    { id: "none", label: "No uso anticoncepci√≥n hormonal" },
                    { id: "pill", label: "P√≠ldora anticonceptiva" },
                    { id: "iud_hormonal", label: "DIU hormonal (Mirena, etc.)" },
                    { id: "other_hormonal", label: "Otro m√©todo hormonal (parche, anillo, etc.)" }
                ],
                required: true
            },
            {
                id: "cycle_pattern",
                type: "single",
                title: "¬øC√≥mo ha sido tu ciclo en los √∫ltimos 3 meses?",
                subtitle: "Piensa en la regularidad y duraci√≥n general.",
                options: [
                    { id: "regular_normal", label: "Regular, 25-35 d√≠as" },
                    { id: "irregular_short", label: "Irregular, ciclos cortos (<25 d√≠as)" },
                    { id: "irregular_long", label: "Irregular, ciclos largos (>35 d√≠as)" },
                    { id: "very_irregular", label: "Muy irregular, impredecible" },
                    { id: "no_period", label: "No he tenido per√≠odo" }
                ],
                required: true
            },
            {
                id: "symptoms",
                type: "multiple",
                title: "¬øCu√°les son tus s√≠ntomas principales?",
                subtitle: "Marca todos los que hayas experimentado en los √∫ltimos 3 ciclos.",
                options: [
                    { id: "cramps_severe", label: "C√≥licos intensos" },
                    { id: "cramps_mild", label: "C√≥licos leves" },
                    { id: "bloating", label: "Hinchaz√≥n abdominal" },
                    { id: "mood_swings", label: "Cambios de humor" },
                    { id: "anxiety", label: "Ansiedad" },
                    { id: "fatigue", label: "Fatiga extrema" },
                    { id: "headaches", label: "Dolores de cabeza" },
                    { id: "breast_tenderness", label: "Sensibilidad en los senos" },
                    { id: "food_cravings", label: "Antojos intensos" },
                    { id: "insomnia", label: "Problemas para dormir" }
                ],
                required: true
            },
            {
                id: "flow_details",
                type: "single",
                title: "¬øC√≥mo describir√≠as tu sangrado menstrual?",
                subtitle: "Piensa en el flujo de tus √∫ltimos 2-3 per√≠odos.",
                options: [
                    { id: "light_short", label: "Ligero y corto (1-3 d√≠as)" },
                    { id: "light_normal", label: "Ligero pero duraci√≥n normal (4-5 d√≠as)" },
                    { id: "moderate", label: "Moderado, flujo normal" },
                    { id: "heavy_clots", label: "Abundante con co√°gulos" },
                    { id: "heavy_long", label: "Abundante y prolongado (>7 d√≠as)" },
                    { id: "spotting_irregular", label: "Sangrado irregular o manchado" }
                ],
                required: true
            },
            {
                id: "body_signs",
                type: "multiple",
                title: "¬øQu√© se√±ales corporales has notado?",
                subtitle: "Pueden ocurrir en cualquier momento de tu ciclo.",
                options: [
                    { id: "cold_hands_feet", label: "Manos y pies fr√≠os" },
                    { id: "feeling_hot", label: "Sensaci√≥n de calor interno" },
                    { id: "dry_skin_hair", label: "Piel o cabello secos" },
                    { id: "oily_skin", label: "Piel grasa o con acn√©" },
                    { id: "water_retention", label: "Retenci√≥n de l√≠quidos" },
                    { id: "digestive_issues", label: "Problemas digestivos" },
                    { id: "muscle_tension", label: "Tensi√≥n muscular" },
                    { id: "joint_pain", label: "Dolor en articulaciones" }
                ]
            },
            {
                id: "emotions",
                type: "multiple",
                title: "¬øC√≥mo te sientes emocionalmente durante tu ciclo?",
                subtitle: "Especialmente en la semana antes y durante tu per√≠odo.",
                options: [
                    { id: "irritable_angry", label: "Irritable o enojada" },
                    { id: "sad_crying", label: "Triste, con ganas de llorar" },
                    { id: "anxious_worried", label: "Ansiosa o preocupada" },
                    { id: "scattered_unfocused", label: "Dispersa, sin concentraci√≥n" },
                    { id: "overwhelmed", label: "Abrumada" },
                    { id: "withdrawn", label: "Retra√≠da, quiero estar sola" },
                    { id: "emotionally_stable", label: "Generalmente estable" }
                ]
            },
            {
                id: "energy_pattern",
                type: "single",
                title: "¬øC√≥mo es tu patr√≥n de energ√≠a durante el ciclo?",
                subtitle: "Piensa en todo el mes, no solo en tu per√≠odo.",
                options: [
                    { id: "consistent_good", label: "Energ√≠a consistente y buena" },
                    { id: "ups_downs", label: "Altibajos marcados" },
                    { id: "always_tired", label: "Siempre cansada" },
                    { id: "bursts_crashes", label: "R√°fagas de energ√≠a seguidas de colapsos" },
                    { id: "low_morning_better_evening", label: "Baja en la ma√±ana, mejor en la noche" }
                ],
                required: true
            },
            {
                id: "timing",
                type: "single",
                title: "¬øCu√°ndo se intensifican m√°s tus s√≠ntomas?",
                subtitle: "Si tienes ciclos irregulares, piensa en cu√°ndo fue la √∫ltima vez.",
                options: [
                    { id: "week_before", label: "La semana antes del per√≠odo" },
                    { id: "first_days_period", label: "Los primeros d√≠as del per√≠odo" },
                    { id: "throughout_period", label: "Durante todo el per√≠odo" },
                    { id: "ovulation_time", label: "Alrededor de la ovulaci√≥n (mitad del ciclo)" },
                    { id: "random_unpredictable", label: "Es impredecible" }
                ],
                required: true
            }
        ],
        
        pro: [] // Additional pro questions would be added here
    },
    
    decisionMapping: {
        elements: ["tension", "calor", "frio", "humedad", "sequedad"],
        weights: {
            // Contraception patterns
            "contraception:none": { "tension": 0, "calor": 0, "frio": 0, "humedad": 0, "sequedad": 0 },
            "contraception:pill": { "tension": 1, "calor": -1, "frio": 1, "humedad": -1, "sequedad": 1 },
            
            // Cycle patterns
            "cycle_pattern:regular_normal": { "tension": 0, "calor": 0, "frio": 0, "humedad": 0, "sequedad": 0 },
            "cycle_pattern:irregular_short": { "tension": 2, "calor": 2, "frio": 0, "humedad": 0, "sequedad": 1 },
            "cycle_pattern:irregular_long": { "tension": 1, "calor": 0, "frio": 2, "humedad": 1, "sequedad": 0 },
            "cycle_pattern:very_irregular": { "tension": 3, "calor": 1, "frio": 1, "humedad": 0, "sequedad": 0 },
            "cycle_pattern:no_period": { "tension": 1, "calor": -1, "frio": 2, "humedad": 0, "sequedad": 2 },
            
            // Symptoms
            "symptoms:cramps_severe": { "tension": 2, "calor": 1, "frio": 0, "humedad": 0, "sequedad": 0 },
            "symptoms:cramps_mild": { "tension": 1, "calor": 0, "frio": 0, "humedad": 0, "sequedad": 0 },
            "symptoms:bloating": { "tension": 0, "calor": 0, "frio": 1, "humedad": 2, "sequedad": 0 },
            "symptoms:mood_swings": { "tension": 2, "calor": 1, "frio": 0, "humedad": 0, "sequedad": 0 },
            "symptoms:anxiety": { "tension": 2, "calor": 1, "frio": 0, "humedad": 0, "sequedad": 1 },
            "symptoms:fatigue": { "tension": 1, "calor": 0, "frio": 2, "humedad": 1, "sequedad": 1 },
            "symptoms:headaches": { "tension": 2, "calor": 2, "frio": 0, "humedad": 0, "sequedad": 1 },
            "symptoms:breast_tenderness": { "tension": 1, "calor": 1, "frio": 0, "humedad": 1, "sequedad": 0 },
            "symptoms:food_cravings": { "tension": 1, "calor": 1, "frio": 1, "humedad": 0, "sequedad": 0 },
            "symptoms:insomnia": { "tension": 2, "calor": 2, "frio": 0, "humedad": 0, "sequedad": 1 },
            
            // Flow details
            "flow_details:light_short": { "tension": 1, "calor": 0, "frio": 1, "humedad": 0, "sequedad": 2 },
            "flow_details:light_normal": { "tension": 0, "calor": 0, "frio": 1, "humedad": 0, "sequedad": 1 },
            "flow_details:moderate": { "tension": 0, "calor": 0, "frio": 0, "humedad": 0, "sequedad": 0 },
            "flow_details:heavy_clots": { "tension": 0, "calor": 2, "frio": 0, "humedad": 2, "sequedad": 0 },
            "flow_details:heavy_long": { "tension": 1, "calor": 2, "frio": 0, "humedad": 1, "sequedad": 0 },
            "flow_details:spotting_irregular": { "tension": 2, "calor": 0, "frio": 1, "humedad": 0, "sequedad": 1 },
            
            // Body signs
            "body_signs:cold_hands_feet": { "tension": 0, "calor": 0, "frio": 2, "humedad": 0, "sequedad": 1 },
            "body_signs:feeling_hot": { "tension": 0, "calor": 2, "frio": 0, "humedad": 0, "sequedad": 1 },
            "body_signs:dry_skin_hair": { "tension": 1, "calor": 1, "frio": 1, "humedad": 0, "sequedad": 2 },
            "body_signs:oily_skin": { "tension": 0, "calor": 1, "frio": 0, "humedad": 1, "sequedad": 0 },
            "body_signs:water_retention": { "tension": 0, "calor": 0, "frio": 1, "humedad": 2, "sequedad": 0 },
            "body_signs:digestive_issues": { "tension": 1, "calor": 1, "frio": 1, "humedad": 1, "sequedad": 0 },
            "body_signs:muscle_tension": { "tension": 2, "calor": 0, "frio": 1, "humedad": 0, "sequedad": 0 },
            "body_signs:joint_pain": { "tension": 1, "calor": 1, "frio": 1, "humedad": 0, "sequedad": 1 },
            
            // Emotions
            "emotions:irritable_angry": { "tension": 2, "calor": 2, "frio": 0, "humedad": 0, "sequedad": 0 },
            "emotions:sad_crying": { "tension": 1, "calor": 0, "frio": 1, "humedad": 1, "sequedad": 0 },
            "emotions:anxious_worried": { "tension": 2, "calor": 1, "frio": 0, "humedad": 0, "sequedad": 1 },
            "emotions:scattered_unfocused": { "tension": 2, "calor": 0, "frio": 1, "humedad": 0, "sequedad": 1 },
            "emotions:overwhelmed": { "tension": 2, "calor": 1, "frio": 1, "humedad": 1, "sequedad": 0 },
            "emotions:withdrawn": { "tension": 1, "calor": 0, "frio": 1, "humedad": 0, "sequedad": 1 },
            "emotions:emotionally_stable": { "tension": 0, "calor": 0, "frio": 0, "humedad": 0, "sequedad": 0 },
            
            // Energy patterns
            "energy_pattern:consistent_good": { "tension": 0, "calor": 0, "frio": 0, "humedad": 0, "sequedad": 0 },
            "energy_pattern:ups_downs": { "tension": 2, "calor": 1, "frio": 0, "humedad": 0, "sequedad": 0 },
            "energy_pattern:always_tired": { "tension": 0, "calor": 0, "frio": 2, "humedad": 1, "sequedad": 1 },
            "energy_pattern:bursts_crashes": { "tension": 2, "calor": 2, "frio": 0, "humedad": 0, "sequedad": 1 },
            "energy_pattern:low_morning_better_evening": { "tension": 1, "calor": 0, "frio": 1, "humedad": 1, "sequedad": 0 },
            
            // Timing
            "timing:week_before": { "tension": 1, "calor": 1, "frio": 0, "humedad": 1, "sequedad": 0 },
            "timing:first_days_period": { "tension": 2, "calor": 1, "frio": 1, "humedad": 0, "sequedad": 0 },
            "timing:throughout_period": { "tension": 1, "calor": 1, "frio": 1, "humedad": 1, "sequedad": 0 },
            "timing:ovulation_time": { "tension": 1, "calor": 2, "frio": 0, "humedad": 0, "sequedad": 0 },
            "timing:random_unpredictable": { "tension": 2, "calor": 0, "frio": 0, "humedad": 0, "sequedad": 1 }
        },
        thresholds: {
            tie_breaker: ["calor", "tension", "frio", "humedad", "sequedad"]
        }
    },
    
    resultsTemplate: {
        types: {
            tension: {
                element: "Viento/Aire üå¨Ô∏è",
                name: "Patr√≥n de Tensi√≥n",
                pattern: "Exceso de Viento con espasmo uterino y nervioso",
                summary: "Tu ciclo se caracteriza por variabilidad, espasmos y una energ√≠a que se mueve r√°pidamente. Como el viento, puedes sentirte dispersa y experimentar s√≠ntomas que cambian de intensidad.",
                why: "Desde la visi√≥n energ√©tica, el elemento Viento gobierna el movimiento y los cambios. Cuando est√° en exceso, puede crear espasmos uterinos (c√≥licos), irregularidades en el ciclo, y s√≠ntomas emocionales como ansiedad o irritabilidad que van y vienen como r√°fagas.",
                lifestyle: {
                    folicular: ["Rutinas suaves y consistentes", "Meditaci√≥n o yoga restaurativo", "Evitar exceso de estimulantes"],
                    ovulatoria: ["Actividades que te centren", "Evitar sobrecarga de actividades", "Mantener horarios regulares"],
                    lutea: ["Priorizar el descanso", "T√©cnicas de relajaci√≥n", "Ambientes tranquilos"],
                    menstrual: ["Descanso profundo", "Calor en el abdomen", "Actividades muy suaves"]
                },
                nutrition: ["Alimentos tibios y nutritivos", "Evitar alimentos muy fr√≠os o crudos", "Comidas regulares y no saltarse ninguna", "Grasas saludables para nutrir el sistema nervioso"],
                herbal_actions_preview: [
                    { action: "Antiespasm√≥dica", explain: "Relaja los m√∫sculos uterinos y reduce c√≥licos" },
                    { action: "Nervina calmante", explain: "Calma y centra el sistema nervioso" },
                    { action: "Carminativa", explain: "Mejora la digesti√≥n y reduce la hinchaz√≥n" }
                ]
            },
            calor: {
                element: "Fuego üî•",
                name: "Patr√≥n de Calor", 
                pattern: "Exceso de Fuego: calor interno, sangrado abundante",
                summary: "Tu ciclo refleja un exceso de calor interno, que se manifiesta en sangrados abundantes, s√≠ntomas intensos y una tendencia al calor y la irritabilidad.",
                why: "El elemento Fuego gobierna la circulaci√≥n y el metabolismo. En exceso, puede crear per√≠odos muy abundantes, c√≥licos intensos, irritabilidad, sensaci√≥n de calor interno y s√≠ntomas que aparecen de forma s√∫bita e intensa.",
                lifestyle: {
                    folicular: ["Actividades refrescantes", "Evitar ejercicio muy intenso", "Ambientes frescos"],
                    ovulatoria: ["Moderar la actividad", "Evitar exposici√≥n excesiva al sol", "Hidrataci√≥n abundante"],
                    lutea: ["Actividades calmantes", "Evitar alimentos muy picantes", "Descanso en lugares frescos"],
                    menstrual: ["Compresas fr√≠as si hay mucha inflamaci√≥n", "Reposo", "Evitar ba√±os muy calientes"]
                },
                nutrition: ["Alimentos frescos y hidratantes", "Frutas de temporada", "Evitar picantes y alcohol", "Vegetales de hoja verde", "Agua de coco o infusiones fr√≠as"],
                herbal_actions_preview: [
                    { action: "Refrescante", explain: "Reduce el calor interno excesivo" },
                    { action: "Astringente suave", explain: "Ayuda a moderar el sangrado abundante" },
                    { action: "Antiinflamatoria", explain: "Reduce la inflamaci√≥n y el dolor" }
                ]
            },
            frio: {
                element: "Fuego deficiente ‚ùÑÔ∏è",
                name: "Patr√≥n de Fr√≠o",
                pattern: "Deficiencia de Fuego: circulaci√≥n lenta y retrasos",
                summary: "Tu ciclo muestra signos de deficiencia de calor interno, con tendencia a ciclos largos, sangrado ligero y sensaci√≥n de fr√≠o, especialmente en manos y pies.",
                why: "Cuando el Fuego interno es deficiente, la circulaci√≥n se vuelve lenta, los ciclos pueden alargarse, el sangrado ser escaso, y puedes sentir fr√≠o, fatiga y una energ√≠a que tarda en activarse.",
                lifestyle: {
                    folicular: ["Ejercicio suave que genere calor", "Ambientes c√°lidos", "Actividades que estimulen suavemente"],
                    ovulatoria: ["Continuar con movimiento regular", "Ba√±os tibios", "Exposici√≥n moderada al sol"],
                    lutea: ["Mantener el calor corporal", "Actividades reconfortantes", "Ambientes acogedores"],
                    menstrual: ["Calor en abdomen y espalda baja", "Bebidas calientes", "Descanso en ambiente c√°lido"]
                },
                nutrition: ["Alimentos tibios y cocidos", "Especias suaves (jengibre, canela)", "Evitar alimentos muy fr√≠os", "Sopas y guisos nutritivos", "T√©s de hierbas calientes"],
                herbal_actions_preview: [
                    { action: "Estimulante circulatorio", explain: "Mejora la circulaci√≥n y genera calor interno" },
                    { action: "T√≥nica uterina", explain: "Fortalece y tonifica el √∫tero" },
                    { action: "Digestiva caliente", explain: "Estimula la digesti√≥n y el metabolismo" }
                ]
            },
            humedad: {
                element: "Agua üíß",
                name: "Patr√≥n de Humedad",
                pattern: "Exceso de Agua: pesadez, retenci√≥n, co√°gulos",
                summary: "Tu ciclo refleja un exceso de humedad interna, que se manifiesta en retenci√≥n de l√≠quidos, sensaci√≥n de pesadez, y posibles co√°gulos en el sangrado.",
                why: "El elemento Agua gobierna los fluidos corporales. En exceso, puede crear retenci√≥n de l√≠quidos, hinchaz√≥n, sangrados con co√°gulos, digesti√≥n lenta y una sensaci√≥n general de pesadez y letargo.",
                lifestyle: {
                    folicular: ["Ejercicio que promueva la circulaci√≥n", "Actividades que generen movimiento", "Evitar ambientes muy h√∫medos"],
                    ovulatoria: ["Continuar con actividad f√≠sica regular", "Drenaje linf√°tico suave", "Actividades al aire libre"],
                    lutea: ["Ejercicio suave pero consistente", "T√©cnicas de drenaje", "Evitar exceso de sal"],
                    menstrual: ["Movimiento muy suave", "Calor seco en abdomen", "Posiciones que favorezcan el drenaje"]
                },
                nutrition: ["Alimentos que drenen suavemente", "Evitar l√°cteos en exceso", "Vegetales diur√©ticos suaves", "Granos integrales", "Limitar sal y az√∫car refinada"],
                herbal_actions_preview: [
                    { action: "Diur√©tica suave", explain: "Ayuda a drenar el exceso de l√≠quidos" },
                    { action: "Carminativa", explain: "Mejora la digesti√≥n y reduce la hinchaz√≥n" },
                    { action: "Circulatoria", explain: "Promueve la circulaci√≥n y el movimiento de fluidos" }
                ]
            },
            sequedad: {
                element: "Agua deficiente üåµ",
                name: "Patr√≥n de Sequedad",
                pattern: "Deficiencia de Agua: flujo escaso, piel/mucosas secas",
                summary: "Tu ciclo muestra signos de deficiencia de fluidos internos, con tendencia a sangrados ligeros, sequedad y s√≠ntomas relacionados con la falta de hidrataci√≥n interna.",
                why: "Cuando el elemento Agua es deficiente, los fluidos corporales se reducen, el sangrado puede ser escaso, la piel y mucosas se resecan, y puede haber s√≠ntomas como estre√±imiento o sensaci√≥n de sequedad general.",
                lifestyle: {
                    folicular: ["Hidrataci√≥n profunda", "Ambientes con humedad adecuada", "Evitar calor excesivo"],
                    ovulatoria: ["Continuar con hidrataci√≥n", "Actividades suaves en ambientes h√∫medos", "Evitar sobrecalentamiento"],
                    lutea: ["Hidrataci√≥n interna y externa", "Humectaci√≥n de piel", "Ambientes no muy secos"],
                    menstrual: ["Hidrataci√≥n constante", "Compresas tibias h√∫medas", "Evitar ambientes muy secos"]
                },
                nutrition: ["Alimentos hidratantes", "Grasas saludables (aguacate, frutos secos)", "Frutas jugosas", "Sopas y caldos", "Evitar alimentos muy salados o deshidratantes"],
                herbal_actions_preview: [
                    { action: "Demulcente", explain: "Suaviza y humecta los tejidos internos" },
                    { action: "Nutritiva", explain: "Nutre profundamente los fluidos corporales" },
                    { action: "Emoliente", explain: "Hidrata y suaviza las mucosas" }
                ]
            }
        }
    }
};

// DOM elements
let elements = {};

// Initialize application
document.addEventListener('DOMContentLoaded', initializeApp);

async function initializeApp() {
    try {
        // Get DOM elements
        elements = {
            loadingScreen: document.getElementById('loading-screen'),
            errorMessage: document.getElementById('error-message'),
            errorText: document.getElementById('error-text'),
            app: document.getElementById('app'),
            progressBar: document.getElementById('progress-bar'),
            progressFill: document.getElementById('progress-fill'),
            progressText: document.getElementById('progress-text')
        };

        // Load data (in a real app, these would be fetch calls)
        await loadAppData();
        
        // Initialize screens
        initializeScreens();
        
        // Setup event listeners
        setupEventListeners();
        
        // Render initial screen
        renderLandingPage();
        
        // Hide loading, show app
        hideLoading();
        
    } catch (error) {
        console.error('Failed to initialize app:', error);
        showError('No se pudo cargar la aplicaci√≥n. Por favor, recarga la p√°gina.');
    }
}

async function loadAppData() {
    // Simulate loading JSON files
    // In a real app: appData.landingPage = await fetch(`${DATA_PATH}landing_page.json`).then(r => r.json());
    appData.landingPage = sampleData.landingPage;
    appData.questions = sampleData.questions;
    appData.decisionMapping = sampleData.decisionMapping;
    appData.resultsTemplate = sampleData.resultsTemplate;
}

function initializeScreens() {
    // Get all screen elements
    elements.screens = {
        landingPage: document.getElementById('landing-page'),
        versionSelection: document.getElementById('version-selection'),
        surveyScreen: document.getElementById('survey-screen'),
        emailCollection: document.getElementById('email-collection'),
        resultsScreen: document.getElementById('results-screen')
    };
}

function setupEventListeners() {
    // Landing page start button
    const startBtn = document.getElementById('start-btn');
    if (startBtn) {
        startBtn.addEventListener('click', showVersionSelection);
    }
    
    // Version selection
    const versionCards = document.querySelectorAll('.version-card');
    versionCards.forEach(card => {
        const button = card.querySelector('.btn');
        if (button) {
            button.addEventListener('click', (e) => {
                const version = card.dataset.version;
                startSurvey(version);
            });
        }
    });
    
    // Survey navigation
    const backBtn = document.getElementById('back-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (backBtn) {
        backBtn.addEventListener('click', goToPreviousQuestion);
    }
    
    if (nextBtn) {
        nextBtn.addEventListener('click', goToNextQuestion);
    }
    
    // Email form
    const emailForm = document.getElementById('email-form');
    if (emailForm) {
        emailForm.addEventListener('submit', handleEmailSubmission);
    }
    
    // Retake survey
    const retakeBtn = document.getElementById('retake-survey');
    if (retakeBtn) {
        retakeBtn.addEventListener('click', () => {
            appState.surveyVersion = 'pro';
            resetSurvey();
            startSurvey('pro');
        });
    }
}

function showScreen(screenId) {
    // Hide all screens
    Object.values(elements.screens).forEach(screen => {
        if (screen) screen.classList.remove('active');
    });
    
    // Show target screen
    const targetScreen = elements.screens[screenId];
    if (targetScreen) {
        targetScreen.classList.add('active');
        appState.currentScreen = screenId;
    }
    
    // Update progress
    updateProgress();
}

function renderLandingPage() {
    const data = appData.landingPage;
    
    // Hero section
    const heroTitle = document.getElementById('hero-title');
    const heroSubtitle = document.getElementById('hero-subtitle');
    const startBtnText = document.getElementById('start-btn-text');
    
    if (heroTitle) heroTitle.textContent = data.hero.title;
    if (heroSubtitle) heroSubtitle.textContent = data.hero.subtitle;
    if (startBtnText) startBtnText.textContent = data.hero.primary_cta;
    
    // Value proposition
    const valuePropTitle = document.getElementById('value-prop-title');
    const benefitsGrid = document.getElementById('benefits-grid');
    
    if (valuePropTitle) valuePropTitle.textContent = data.value_prop.title;
    
    if (benefitsGrid) {
        benefitsGrid.innerHTML = data.value_prop.bullets.map(bullet => `
            <div class="benefit-card">
                <p>${bullet}</p>
            </div>
        `).join('');
    }
    
    // Waitlist section
    renderWaitlistSection();
}

function renderWaitlistSection() {
    const data = appData.landingPage.waitlist;
    
    const waitlistTitle = document.getElementById('waitlist-title');
    const waitlistBenefits = document.getElementById('waitlist-benefits');
    const launchDate = document.getElementById('launch-date');
    
    if (waitlistTitle) waitlistTitle.textContent = data.title;
    if (launchDate) launchDate.textContent = data.launch_date;
    
    if (waitlistBenefits) {
        waitlistBenefits.innerHTML = data.benefits.map(benefit => `
            <div class="waitlist-benefit">
                <span>${benefit}</span>
            </div>
        `).join('');
    }
}

function showVersionSelection() {
    showScreen('versionSelection');
}

function startSurvey(version) {
    appState.surveyVersion = version;
    appState.currentQuestionIndex = 0;
    appState.answers = {};
    
    showScreen('surveyScreen');
    renderCurrentQuestion();
}

function renderCurrentQuestion() {
    const questions = appData.questions[appState.surveyVersion];
    const currentQuestion = questions[appState.currentQuestionIndex];
    
    if (!currentQuestion) {
        // No more questions, go to email collection
        showScreen('emailCollection');
        return;
    }
    
    // Update question header
    const questionTitle = document.getElementById('question-title');
    const questionSubtitle = document.getElementById('question-subtitle');
    const questionContent = document.getElementById('question-content');
    const questionHelp = document.getElementById('question-help');
    
    if (questionTitle) questionTitle.textContent = currentQuestion.title;
    if (questionSubtitle) {
        questionSubtitle.textContent = currentQuestion.subtitle || '';
        questionSubtitle.style.display = currentQuestion.subtitle ? 'block' : 'none';
    }
    
    if (questionHelp) {
        questionHelp.textContent = currentQuestion.help || '';
        questionHelp.style.display = currentQuestion.help ? 'block' : 'none';
    }
    
    // Render question content based on type
    if (questionContent) {
        questionContent.innerHTML = renderQuestionByType(currentQuestion);
        
        // Setup question-specific event listeners
        setupQuestionEventListeners(currentQuestion);
    }
    
    // Update navigation buttons
    updateNavigationButtons();
}

function renderQuestionByType(question) {
    switch (question.type) {
        case 'single':
            return renderSingleChoiceQuestion(question);
        case 'multiple':
            return renderMultipleChoiceQuestion(question);
        case 'slider':
            return renderSliderQuestion(question);
        default:
            return '<p>Tipo de pregunta no soportado</p>';
    }
}

function renderSingleChoiceQuestion(question) {
    const currentAnswer = appState.answers[question.id];
    
    return `
        <div class="options-grid">
            ${question.options.map(option => `
                <div class="option-card ${currentAnswer === option.id ? 'selected' : ''}" 
                     data-question-id="${question.id}" 
                     data-option-id="${option.id}"
                     tabindex="0"
                     role="button"
                     aria-pressed="${currentAnswer === option.id}">
                    <input type="radio" 
                           name="${question.id}" 
                           value="${option.id}" 
                           id="${question.id}_${option.id}"
                           ${currentAnswer === option.id ? 'checked' : ''}>
                    <label for="${question.id}_${option.id}">${option.label}</label>
                </div>
            `).join('')}
        </div>
    `;
}

function renderMultipleChoiceQuestion(question) {
    const currentAnswers = appState.answers[question.id] || [];
    
    return `
        <div class="options-grid">
            ${question.options.map(option => `
                <div class="option-card ${currentAnswers.includes(option.id) ? 'selected' : ''}" 
                     data-question-id="${question.id}" 
                     data-option-id="${option.id}"
                     tabindex="0"
                     role="button"
                     aria-pressed="${currentAnswers.includes(option.id)}">
                    <input type="checkbox" 
                           name="${question.id}" 
                           value="${option.id}" 
                           id="${question.id}_${option.id}"
                           ${currentAnswers.includes(option.id) ? 'checked' : ''}>
                    <label for="${question.id}_${option.id}">${option.label}</label>
                </div>
            `).join('')}
        </div>
    `;
}

function renderSliderQuestion(question) {
    const currentAnswer = appState.answers[question.id] || question.default || 5;
    
    return `
        <div class="slider-container">
            <input type="range" 
                   class="slider" 
                   id="${question.id}" 
                   min="${question.min || 1}" 
                   max="${question.max || 10}" 
                   value="${currentAnswer}"
                   step="1">
            <div class="slider-labels">
                <span>${question.min_label || 'M√≠nimo'}</span>
                <span id="${question.id}_value">${currentAnswer}</span>
                <span>${question.max_label || 'M√°ximo'}</span>
            </div>
        </div>
    `;
}

function setupQuestionEventListeners(question) {
    // Option card clicks
    const optionCards = document.querySelectorAll(`[data-question-id="${question.id}"]`);
    optionCards.forEach(card => {
        card.addEventListener('click', handleOptionSelect);
        card.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                handleOptionSelect(e);
            }
        });
    });
    
    // Slider input
    if (question.type === 'slider') {
        const slider = document.getElementById(question.id);
        const valueDisplay = document.getElementById(`${question.id}_value`);
        
        if (slider && valueDisplay) {
            slider.addEventListener('input', (e) => {
                const value = parseInt(e.target.value);
                valueDisplay.textContent = value;
                appState.answers[question.id] = value;
            });
        }
    }
}

function handleOptionSelect(e) {
    const card = e.currentTarget;
    const questionId = card.dataset.questionId;
    const optionId = card.dataset.optionId;
    const questions = appData.questions[appState.surveyVersion];
    const question = questions.find(q => q.id === questionId);
    
    if (!question) return;
    
    if (question.type === 'single') {
        // Single choice: replace answer
        appState.answers[questionId] = optionId;
        
        // Update UI
        const allCards = document.querySelectorAll(`[data-question-id="${questionId}"]`);
        allCards.forEach(c => {
            c.classList.remove('selected');
            c.setAttribute('aria-pressed', 'false');
            const radio = c.querySelector('input[type="radio"]');
            if (radio) radio.checked = false;
        });
        
        card.classList.add('selected');
        card.setAttribute('aria-pressed', 'true');
        const radio = card.querySelector('input[type="radio"]');
        if (radio) radio.checked = true;
        
    } else if (question.type === 'multiple') {
        // Multiple choice: toggle answer
        if (!appState.answers[questionId]) {
            appState.answers[questionId] = [];
        }
        
        const answers = appState.answers[questionId];
        const index = answers.indexOf(optionId);
        
        if (index > -1) {
            // Remove answer
            answers.splice(index, 1);
            card.classList.remove('selected');
            card.setAttribute('aria-pressed', 'false');
            const checkbox = card.querySelector('input[type="checkbox"]');
            if (checkbox) checkbox.checked = false;
        } else {
            // Add answer
            answers.push(optionId);
            card.classList.add('selected');
            card.setAttribute('aria-pressed', 'true');
            const checkbox = card.querySelector('input[type="checkbox"]');
            if (checkbox) checkbox.checked = true;
        }
    }
    
    // Update navigation buttons
    updateNavigationButtons();
}

function updateNavigationButtons() {
    const backBtn = document.getElementById('back-btn');
    const nextBtn = document.getElementById('next-btn');
    const questions = appData.questions[appState.surveyVersion];
    const currentQuestion = questions[appState.currentQuestionIndex];
    
    // Back button
    if (backBtn) {
        backBtn.style.display = appState.currentQuestionIndex > 0 ? 'block' : 'none';
    }
    
    // Next button
    if (nextBtn && currentQuestion) {
        const hasAnswer = validateCurrentQuestion(currentQuestion);
        nextBtn.disabled = !hasAnswer;
        nextBtn.textContent = appState.currentQuestionIndex === questions.length - 1 ? 'Terminar' : 'Continuar ‚Üí';
    }
}

function validateCurrentQuestion(question) {
    const answer = appState.answers[question.id];
    
    if (!question.required) return true;
    
    if (question.type === 'single') {
        return !!answer;
    } else if (question.type === 'multiple') {
        return Array.isArray(answer) && answer.length > 0;
    } else if (question.type === 'slider') {
        return answer !== null && answer !== undefined;
    }
    
    return false;
}

function goToPreviousQuestion() {
    if (appState.currentQuestionIndex > 0) {
        appState.currentQuestionIndex--;
        renderCurrentQuestion();
    }
}

function goToNextQuestion() {
    const questions = appData.questions[appState.surveyVersion];
    const currentQuestion = questions[appState.currentQuestionIndex];
    
    if (!validateCurrentQuestion(currentQuestion)) {
        return;
    }
    
    if (appState.currentQuestionIndex < questions.length - 1) {
        appState.currentQuestionIndex++;
        renderCurrentQuestion();
    } else {
        // Finished survey
        showScreen('emailCollection');
    }
}

async function handleEmailSubmission(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const name = formData.get('name');
    const email = formData.get('email');
    const consentResults = formData.get('consent-results') === 'on';
    const consentWaitlist = formData.get('consent-waitlist') === 'on';
    
    if (!name || !email || !consentResults) {
        alert('Por favor, completa todos los campos requeridos.');
        return;
    }
    
    // Store user info
    appState.userInfo = { name, email, consentResults, consentWaitlist };
    
    // Calculate results
    calculateResults();
    
    // Show results
    showScreen('resultsScreen');
    renderResults();
    
    // Save to database and send email (async)
    try {
        await saveResponseToDatabase();
        await sendResultsEmail();
        
        if (consentWaitlist) {
            await addToWaitlist();
        }
        
        showSuccessModal();
    } catch (error) {
        console.error('Error saving/sending results:', error);
        // Continue to results screen anyway
    }
}

function calculateResults() {
    const decisionMapping = appData.decisionMapping;
    const elementScores = {};
    
    // Initialize scores
    decisionMapping.elements.forEach(element => {
        elementScores[element] = 0;
    });
    
    // Calculate scores based on answers
    Object.entries(appState.answers).forEach(([questionId, answer]) => {
        if (Array.isArray(answer)) {
            // Multiple choice answers
            answer.forEach(optionId => {
                const key = `${questionId}:${optionId}`;
                const weights = decisionMapping.weights[key];
                if (weights) {
                    Object.entries(weights).forEach(([element, weight]) => {
                        elementScores[element] += weight;
                    });
                }
            });
        } else {
            // Single choice answers
            const key = `${questionId}:${answer}`;
            const weights = decisionMapping.weights[key];
            if (weights) {
                Object.entries(weights).forEach(([element, weight]) => {
                    elementScores[element] += weight;
                });
            }
        }
    });
    
    // Find dominant element
    const maxScore = Math.max(...Object.values(elementScores));
    const dominantElements = Object.entries(elementScores)
        .filter(([element, score]) => score === maxScore)
        .map(([element]) => element);
    
    // Tie breaker
    let finalElement;
    if (dominantElements.length === 1) {
        finalElement = dominantElements[0];
    } else {
        // Use tie breaker order
        for (const element of decisionMapping.thresholds.tie_breaker) {
            if (dominantElements.includes(element)) {
                finalElement = element;
                break;
            }
        }
    }
    
    appState.elementScores = elementScores;
    appState.finalResult = finalElement;
}

function renderResults() {
    const resultData = appData.resultsTemplate.types[appState.finalResult];
    
    if (!resultData) {
        console.error('No result data found for:', appState.finalResult);
        return;
    }
    
    // Element badge
    const elementIcon = document.getElementById('element-icon');
    const elementName = document.getElementById('element-name');
    
    if (elementIcon && elementName) {
        // Extract emoji and name from element string
        const [emoji] = resultData.element.match(/\p{Emoji}/gu) || ['üåø'];
        const name = resultData.element.replace(/\p{Emoji}/gu, '').trim();
        
        elementIcon.textContent = emoji;
        elementName.textContent = name;
    }
    
    // Results header
    const resultsTitle = document.getElementById('results-title');
    const resultsSummary = document.getElementById('results-summary');
    
    if (resultsTitle) resultsTitle.textContent = `Tu patr√≥n: ${resultData.name}`;
    if (resultsSummary) resultsSummary.textContent = resultData.summary;
    
    // Explanation
    const resultsExplanation = document.getElementById('results-explanation');
    if (resultsExplanation) resultsExplanation.textContent = resultData.why;
    
    // Cycle phases
    const cyclePhases = document.getElementById('cycle-phases');
    if (cyclePhases && resultData.lifestyle) {
        cyclePhases.innerHTML = Object.entries(resultData.lifestyle).map(([phase, recommendations]) => `
            <div class="cycle-phase">
                <div class="phase-name">${getPhaseDisplayName(phase)}</div>
                <ul>
                    ${recommendations.map(rec => `<li>${rec}</li>`).join('')}
                </ul>
            </div>
        `).join('');
    }
    
    // Herbal actions
    const herbalActions = document.getElementById('herbal-actions');
    if (herbalActions && resultData.herbal_actions_preview) {
        herbalActions.innerHTML = resultData.herbal_actions_preview.map(action => `
            <div class="herbal-action">
                <div class="action-name">${action.action}</div>
                <div class="action-explanation">${action.explain}</div>
            </div>
        `).join('');
    }
}

function getPhaseDisplayName(phase) {
    const phaseNames = {
        folicular: 'Fase Folicular',
        ovulatoria: 'Fase Ovulatoria', 
        lutea: 'Fase L√∫tea',
        menstrual: 'Fase Menstrual'
    };
    return phaseNames[phase] || phase;
}

async function saveResponseToDatabase() {
    const payload = {
        timestamp: new Date().toISOString(),
        version: appState.surveyVersion,
        name: appState.userInfo.name,
        email: appState.userInfo.email,
        answers: appState.answers,
        element_scores: appState.elementScores,
        final_type: appState.finalResult,
        consent_waitlist: appState.userInfo.consentWaitlist,
        source: 'quiz',
        meta: {
            user_agent: navigator.userAgent,
            locale: navigator.language
        }
    };
    
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/survey_responses`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
            },
            body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
            throw new Error('Supabase save failed');
        }
        
    } catch (error) {
        console.error('Database save error:', error);
        // Fallback: store in memory (could also use IndexedDB)
        console.log('Stored response locally:', payload);
    }
}

async function sendResultsEmail() {
    const resultData = appData.resultsTemplate.types[appState.finalResult];
    const emailContent = generateEmailContent(resultData);
    
    const payload = {
        email: appState.userInfo.email,
        name: appState.userInfo.name,
        subject: `Tus resultados: ${resultData.name}`,
        message: emailContent,
        version: appState.surveyVersion,
        result_type: appState.finalResult
    };
    
    try {
        const response = await fetch(FORMSPREE_ENDPOINT, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
            throw new Error('Email send failed');
        }
        
    } catch (error) {
        console.error('Email send error:', error);
        throw error;
    }
}

function generateEmailContent(resultData) {
    return `
¬°Hola ${appState.userInfo.name}!

Aqu√≠ est√°n los resultados de tu evaluaci√≥n menstrual personalizada:

üåø TU PATR√ìN: ${resultData.name}
${resultData.element}

üìã RESUMEN:
${resultData.summary}

üîç ¬øPOR QU√â ESTE RESULTADO?
${resultData.why}

üìÖ RECOMENDACIONES POR FASE:
${Object.entries(resultData.lifestyle || {}).map(([phase, recs]) => 
    `\n${getPhaseDisplayName(phase)}:\n${recs.map(rec => `‚Ä¢ ${rec}`).join('\n')}`
).join('\n')}

üåø ACCIONES HERBALES QUE PODR√çAN AYUDARTE:
${(resultData.herbal_actions_preview || []).map(action => 
    `‚Ä¢ ${action.action}: ${action.explain}`
).join('\n')}

${appData.landingPage.waitlist.title}
${appData.landingPage.waitlist.benefits.join('\n')}

${appData.landingPage.waitlist.launch_date}

---
‚ö†Ô∏è AVISO M√âDICO IMPORTANTE:
Este contenido es informativo y no sustituye atenci√≥n m√©dica. Consulta siempre con un profesional de la salud.

üîí Tus respuestas se guardan de forma segura y puedes darte de baja en cualquier momento.

¬øSientes que faltaron detalles en tu evaluaci√≥n? Retoma el quiz en modo Pro para obtener una evaluaci√≥n m√°s completa.

Con amor,
Equipo colita de rana üåø
`;
}

async function addToWaitlist() {
    const payload = {
        name: appState.userInfo.name,
        email: appState.userInfo.email,
        source: 'quiz',
        final_type: appState.finalResult
    };
    
    try {
        const response = await fetch(GENERIC_WAITLIST_WEBHOOK, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
            console.error('Waitlist signup failed');
        }
        
    } catch (error) {
        console.error('Waitlist error:', error);
    }
}

function showSuccessModal() {
    const modal = document.getElementById('success-modal');
    if (modal) {
        modal.classList.remove('hidden');
    }
}

function closeSuccessModal() {
    const modal = document.getElementById('success-modal');
    if (modal) {
        modal.classList.add('hidden');
    }
}

function resetSurvey() {
    appState.currentQuestionIndex = 0;
    appState.answers = {};
    appState.elementScores = {};
    appState.finalResult = null;
}

function updateProgress() {
    let progress = 0;
    
    switch (appState.currentScreen) {
        case 'landingPage':
            progress = 0;
            break;
        case 'versionSelection':
            progress = 5;
            break;
        case 'surveyScreen':
            const totalQuestions = appData.questions[appState.surveyVersion].length;
            progress = 10 + ((appState.currentQuestionIndex + 1) / totalQuestions) * 70;
            break;
        case 'emailCollection':
            progress = 85;
            break;
        case 'resultsScreen':
            progress = 100;
            break;
    }
    
    if (elements.progressFill) {
        elements.progressFill.style.width = `${progress}%`;
    }
    if (elements.progressText) {
        elements.progressText.textContent = `${Math.round(progress)}%`;
    }
}

function hideLoading() {
    if (elements.loadingScreen) {
        elements.loadingScreen.style.opacity = '0';
        setTimeout(() => {
            elements.loadingScreen.style.display = 'none';
        }, 500);
    }
    
    if (elements.app) {
        elements.app.classList.remove('hidden');
        elements.app.classList.add('loaded');
    }
}

function showError(message) {
    if (elements.errorText) {
        elements.errorText.textContent = message;
    }
    
    if (elements.loadingScreen) {
        elements.loadingScreen.style.display = 'none';
    }
    
    if (elements.errorMessage) {
        elements.errorMessage.classList.remove('hidden');
    }
}

// Accessibility enhancements
document.addEventListener('keydown', (e) => {
    // ESC to close modals
    if (e.key === 'Escape') {
        closeSuccessModal();
    }
});

// Expose global functions for HTML onclick handlers
window.closeSuccessModal = closeSuccessModal;

// Console info for developers
console.log('üåø Colita de Rana - Menstrual Health Survey App');
console.log('Built with vanilla HTML, CSS, and JavaScript');
console.log('All UI text loaded from JSON data');
console.log('Accessible, responsive, and privacy-focused');